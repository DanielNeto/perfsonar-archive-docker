apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "perfsonar-archive-config-es.fullname" . }}-es-configs
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "perfsonar-archive-config-es.labels" . | nindent 4 }}
data:
  {{- $roleFiles := .Files.Glob "files/roles/*.json" }}
  {{- if $roleFiles }}
  {{- range $path, $bytes := $roleFiles }}
  {{- $name := base $path }}
  {{ printf "role_%s" $name }}: |-
{{ .Files.Get $path | indent 4 }}
  {{- end }}
  {{- end }}

  {{- $roleMappingFiles := .Files.Glob "files/role_mappings/*.json" }}
  {{- if $roleMappingFiles }}
  {{- range $path, $bytes := $roleMappingFiles }}
  {{- $name := base $path }}
  {{ printf "role_mapping_%s" $name }}: |-
{{ .Files.Get $path | indent 4 }}
  {{- end }}
  {{- end }}

  {{- $ilmFiles := .Files.Glob "files/ilm_policies/*.json" }}
  {{- if $ilmFiles }}
  {{- range $path, $bytes := $ilmFiles }}
  {{- $name := base $path }}
  {{ printf "ilm_%s" $name }}: |-
{{ .Files.Get $path | indent 4 }}
  {{- end }}
  {{- end }}

  {{- $componentTemplateFiles := .Files.Glob "files/component_templates/*.json" }}
  {{- if $componentTemplateFiles }}
  {{- range $path, $bytes := $componentTemplateFiles }}
  {{- $name := base $path }}
  {{ printf "component_template_%s" $name }}: |-
{{ .Files.Get $path | indent 4 }}
  {{- end }}
  {{- end }}

  {{- $indexTemplateFiles := .Files.Glob "files/index_templates/*.json" }}
  {{- if $indexTemplateFiles }}
  {{- range $path, $bytes := $indexTemplateFiles }}
  {{- $name := base $path }}
  {{ printf "index_template_%s" $name }}: |-
{{ .Files.Get $path | indent 4 }}
  {{- end }}
  {{- end }}

  # The script to run inside the job
  configure-es.sh: |
    #!/bin/sh
    set -e # Exit immediately if a command exits with a non-zero status.
    # set -x # Print commands and their arguments as they are executed.

    echo "Starting Elasticsearch configuration script..."

    ES_HOST=${ES_HOST}
    ES_PORT=${ES_PORT}
    ES_SCHEME=${ES_SCHEME}
    ES_URL="${ES_SCHEME}://${ES_HOST}:${ES_PORT}"

    CURL_OPTS="-s -f" # Silent, fail on error
    if [ -n "$ES_ADMIN_USERNAME" ] && [ -n "$ES_ADMIN_PASSWORD" ]; then
      CURL_OPTS="$CURL_OPTS -u ${ES_ADMIN_USERNAME}:${ES_ADMIN_PASSWORD}"
    fi
    if [ -f "/es-certs/ca.crt" ]; then
      CURL_OPTS="$CURL_OPTS --cacert /es-certs/ca.crt"
    elif [ "$ES_INSECURE_SKIP_VERIFY" = "true" ]; then
      CURL_OPTS="$CURL_OPTS -k"
    fi

    echo "Waiting for Elasticsearch to be available at ${ES_URL}..."
    RETRY_COUNT=0
    MAX_RETRIES=12
    RETRY_INTERVAL=5
    until curl $CURL_OPTS -XGET "${ES_URL}/_cluster/health?pretty" > /dev/null 2>&1; do
      RETRY_COUNT=$((RETRY_COUNT+1))
      if [ $RETRY_COUNT -ge $MAX_RETRIES ]; then
        echo "Elasticsearch not available after $MAX_RETRIES retries. Exiting."
        exit 1
      fi
      echo "Elasticsearch not yet available. Retrying in $RETRY_INTERVAL seconds... (Attempt $RETRY_COUNT/$MAX_RETRIES)"
      sleep $RETRY_INTERVAL
    done
    echo "Elasticsearch is up!"

    # Apply Roles
    echo "Applying Elasticsearch roles..."
    # Sort files to ensure consistent application order if dependencies exist (though not typical for roles)
    find /config/roles -name '*.json' -print0 | sort -z | while IFS= read -r -d $'\0' role_file_path; do
      if [ -f "$role_file_path" ]; then
        role_name=$(basename "$role_file_path" .json) # e.g., pscheduler_logstash_role
        echo "Applying role: ${role_name}"
        curl $CURL_OPTS -XPUT "${ES_URL}/_security/role/${role_name}" -H "Content-Type: application/json" --data-binary "@${role_file_path}"
        echo # Newline for better log readability
      fi
    done

    # Create/Update Users
    echo "Creating/Updating Elasticsearch users..."
    {{- range $userNameKey, $userConfig := .Values.perfsonarUsers }}
    {{- if $userConfig.username }} # Ensure username is defined
    ES_USER_{{ $userNameKey | upper }}_USERNAME="{{ $userConfig.username }}"
    ES_USER_{{ $userNameKey | upper }}_ROLENAME="{{ $userConfig.roleName }}"
    {{- $secretNameVar := printf "ES_USER_%s_SECRET_NAME" ($userNameKey | upper) }}
    {{- $passwordVar := printf "ES_USER_%s_PASSWORD" ($userNameKey | upper) }}
    {{- $passwordIsSet := false }}
    {{- if $userConfig.existingSecretName }}
    {{ $passwordIsSet = true }}
    {{- $secretKey := $userConfig.generatePassword.secretKey | default "password" }}
    {{ $passwordVar }}="$(cat "/user-passwords/{{ $userNameKey }}/{{ $secretKey }}")"
    {{- else if $userConfig.generatePassword.enabled }}
    {{ $passwordIsSet = true }}
    {{- $secretKey := $userConfig.generatePassword.secretKey | default "password" }}
    {{ $passwordVar }}="$(cat "/user-passwords/{{ $userNameKey }}/{{ $secretKey }}")"
    {{- end }}

    if [ -n "${{ $passwordVar }}" ]; then
      echo "Configuring user: ${{ ES_USER_{{ $userNameKey | upper }}_USERNAME }} with role: ${{ ES_USER_{{ $userNameKey | upper }}_ROLENAME }}"
      # ES user payload needs an array of roles
      USER_PAYLOAD="{\"password\": \"${{ $passwordVar }}\", \"roles\": [\"${{ ES_USER_{{ $userNameKey | upper }}_ROLENAME }}\"]}"
      # Add other roles if specified, e.g. userConfig.otherRoles: [role1, role2]

      curl $CURL_OPTS -XPUT "${ES_URL}/_security/user/${{ ES_USER_{{ $userNameKey | upper }}_USERNAME }}" \
        -H "Content-Type: application/json" \
        -d "$USER_PAYLOAD"
      echo
    else
      echo "Skipping user creation/update for {{ $userConfig.username }}: password not found or generation disabled."
    fi
    {{- else }}
    echo "Skipping user configuration for key '{{ $userNameKey }}': username not defined in values.yaml"
    {{- end }}
    {{- end }}

    # Apply Role Mappings
    echo "Applying Elasticsearch Role Mappings..."
    {{- range $mappingKey, $mappingConfig := .Values.roleMappings }}
    {{- if $mappingConfig.enabled }}
    if [ -f "/config/role_mappings/{{ $mappingConfig.fileName }}" ]; then
      echo "Applying Role Mapping: {{ $mappingConfig.mappingName }} from file {{ $mappingConfig.fileName }}"
      # Role mapping name in ES is derived from mappingConfig.mappingName
      curl $CURL_OPTS -XPUT "${ES_URL}/_security/role_mapping/{{ $mappingConfig.mappingName }}" \
        -H "Content-Type: application/json" \
        --data-binary "@/config/role_mappings/{{ $mappingConfig.fileName }}"
      echo
    else
      echo "Role mapping file /config/role_mappings/{{ $mappingConfig.fileName }} not found. Skipping {{ $mappingConfig.mappingName }}."
    fi
    {{- else }}
    echo "Skipping role mapping {{ $mappingConfig.mappingName }} as it is disabled in values.yaml."
    {{- end }}
    {{- end }}

    # Apply ILM Policies
    echo "Applying ILM policies..."
    {{- range $policyKey, $policyConfig := .Values.ilmPolicies }}
    {{- if $policyConfig.enabled }}
    if [ -f "/config/ilm_policies/{{ $policyConfig.fileName }}" ]; then
      echo "Applying ILM policy: {{ $policyConfig.policyName }} from file {{ $policyConfig.fileName }}"
      curl $CURL_OPTS -XPUT "${ES_URL}/_ilm/policy/{{ $policyConfig.policyName }}" \
        -H "Content-Type: application/json" \
        --data-binary "@/config/ilm_policies/{{ $policyConfig.fileName }}"
      echo
    else
      echo "ILM policy file /config/ilm_policies/{{ $policyConfig.fileName }} not found. Skipping {{ $policyConfig.policyName }}."
    fi
    {{- else }}
    echo "Skipping ILM policy {{ $policyConfig.policyName }} as it is disabled in values.yaml."
    {{- end }}
    {{- end }}

    # Apply Component Templates
    echo "Applying Component Templates..."
    {{- range $ctKey, $ctConfig := .Values.componentTemplates }}
    {{- if $ctConfig.enabled }}
    if [ -f "/config/component_templates/{{ $ctConfig.fileName }}" ]; then
      echo "Applying Component Template: {{ $ctConfig.templateName }} from file {{ $ctConfig.fileName }}"
      curl $CURL_OPTS -XPUT "${ES_URL}/_component_template/{{ $ctConfig.templateName }}" \
        -H "Content-Type: application/json" \
        --data-binary "@/config/component_templates/{{ $ctConfig.fileName }}"
      echo
    else
      echo "Component template file /config/component_templates/{{ $ctConfig.fileName }} not found. Skipping {{ $ctConfig.templateName }}."
    fi
    {{- else }}
    echo "Skipping Component Template {{ $ctConfig.templateName }} as it is disabled in values.yaml."
    {{- end }}
    {{- end }}

    # Apply Composable Index Templates (for Data Streams)
    echo "Applying Composable Index Templates..."
    {{- range $itKey, $itConfig := .Values.indexTemplates }}
    {{- if $itConfig.enabled }}
    if [ -f "/config/index_templates/{{ $itConfig.fileName }}" ]; then
      echo "Applying Composable Index Template: {{ $itConfig.templateName }} from file {{ $itConfig.fileName }}"
      curl $CURL_OPTS -XPUT "${ES_URL}/_index_template/{{ $itConfig.templateName }}" \
        -H "Content-Type: application/json" \
        --data-binary "@/config/index_templates/{{ $itConfig.fileName }}"
      echo
    else
      echo "Index template file /config/index_templates/{{ $itConfig.fileName }} not found. Skipping {{ $itConfig.templateName }}."
    fi
    {{- else }}
    echo "Skipping Index Template {{ $itConfig.templateName }} as it is disabled in values.yaml."
    {{- end }}
    {{- end }}

    # Bootstrap index logic for legacy templates is REMOVED as data streams handle this.

    echo "Elasticsearch configuration script finished successfully."